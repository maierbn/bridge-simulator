Scenario 3
==========

======= function solve truss with 3 elements =======
---------- Input parameters ------------
3 node_positions [x, y]:           [[0, 0], [5, 0], [2, 2]]
3 elements [node start, node end]: [[0, 2], [1, 2], [0, 1]]
2 loads [dof, value]:              [[4, 1], [5, 0.5]]
4 fixed_dofs:                      [0, 1, 2, 3]
parameter EA = 10

id_matrix:
[[0 2 0]
 [1 3 1]
 [4 4 2]
 [5 5 3]]
counting criterion:  4 + 3 - 2 * 3 = 1
 -> hyperstatic (statisch Ã¼berbestimmt)
Try if subsystem without element 0 is solvable.

======= function solve truss with 2 elements =======
---------- Input parameters ------------
3 node_positions [x, y]:           [[0, 0], [5, 0], [2, 2]]
2 elements [node start, node end]: [[1, 2], [0, 1]]
2 loads [dof, value]:              [[4, 1], [5, 0.5]]
4 fixed_dofs:                      [0, 1, 2, 3]
parameter EA = 10

id_matrix:
[[2 0]
 [3 1]
 [4 2]
 [5 3]]
counting criterion:  4 + 2 - 2 * 3 = 0
 -> statically determined (statisch bestimmt)

----- assemble global stiffness matrix from local matrices -----
   - element  0 , angle  146.309932474 , length  3.60555127546
   - element  1 , angle  0.0 , length  5.0

global stiffness matrix k_global:
[[ 2.          0.         -2.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.        ]
 [-2.          0.          3.92011606 -1.28007738 -1.92011606  1.28007738]
 [ 0.          0.         -1.28007738  0.85338492  1.28007738 -0.85338492]
 [ 0.          0.         -1.92011606  1.28007738  1.92011606 -1.28007738]
 [ 0.          0.          1.28007738 -0.85338492 -1.28007738  0.85338492]]

global right hand side load vector f:
[[ 0. ]
 [ 0. ]
 [ 0. ]
 [ 0. ]
 [ 1. ]
 [ 0.5]]

----- reduce system by removing fixed dofs -----
k_global_reduced:
[[ 1.92011606 -1.28007738]
 [-1.28007738  0.85338492]]

f reduced:
[[ 1. ]
 [ 0.5]]

----- solve system k*u = f for u -----
number of nonfixed dofs:  2 , rank of stiffness matrix:  1
(these numbers should be equal, otherwise the system is not statically determined)
Matrix rank is too low. No solution could be found.

Subsystem is not solvable. Remove a different element instead.
Try if subsystem without element 1 is solvable.

======= function solve truss with 2 elements =======
---------- Input parameters ------------
3 node_positions [x, y]:           [[0, 0], [5, 0], [2, 2]]
2 elements [node start, node end]: [[0, 2], [0, 1]]
2 loads [dof, value]:              [[4, 1], [5, 0.5]]
4 fixed_dofs:                      [0, 1, 2, 3]
parameter EA = 10

id_matrix:
[[0 0]
 [1 1]
 [4 2]
 [5 3]]
counting criterion:  4 + 2 - 2 * 3 = 0
 -> statically determined (statisch bestimmt)

----- assemble global stiffness matrix from local matrices -----
   - element  0 , angle  45.0 , length  2.82842712475
   - element  1 , angle  0.0 , length  5.0

global stiffness matrix k_global:
[[ 3.76776695  1.76776695 -2.          0.         -1.76776695 -1.76776695]
 [ 1.76776695  1.76776695  0.          0.         -1.76776695 -1.76776695]
 [-2.          0.          2.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.        ]
 [-1.76776695 -1.76776695  0.          0.          1.76776695  1.76776695]
 [-1.76776695 -1.76776695  0.          0.          1.76776695  1.76776695]]

global right hand side load vector f:
[[ 0. ]
 [ 0. ]
 [ 0. ]
 [ 0. ]
 [ 1. ]
 [ 0.5]]

----- reduce system by removing fixed dofs -----
k_global_reduced:
[[ 1.76776695  1.76776695]
 [ 1.76776695  1.76776695]]

f reduced:
[[ 1. ]
 [ 0.5]]

----- solve system k*u = f for u -----
number of nonfixed dofs:  2 , rank of stiffness matrix:  1
(these numbers should be equal, otherwise the system is not statically determined)
Matrix rank is too low. No solution could be found.

Subsystem is not solvable. Remove a different element instead.
Try if subsystem without element 2 is solvable.

======= function solve truss with 2 elements =======
---------- Input parameters ------------
3 node_positions [x, y]:           [[0, 0], [5, 0], [2, 2]]
2 elements [node start, node end]: [[0, 2], [1, 2]]
2 loads [dof, value]:              [[4, 1], [5, 0.5]]
4 fixed_dofs:                      [0, 1, 2, 3]
parameter EA = 10

id_matrix:
[[0 2]
 [1 3]
 [4 4]
 [5 5]]
counting criterion:  4 + 2 - 2 * 3 = 0
 -> statically determined (statisch bestimmt)

----- assemble global stiffness matrix from local matrices -----
   - element  0 , angle  45.0 , length  2.82842712475
   - element  1 , angle  146.309932474 , length  3.60555127546

global stiffness matrix k_global:
[[ 1.76776695  1.76776695  0.          0.         -1.76776695 -1.76776695]
 [ 1.76776695  1.76776695  0.          0.         -1.76776695 -1.76776695]
 [ 0.          0.          1.92011606 -1.28007738 -1.92011606  1.28007738]
 [ 0.          0.         -1.28007738  0.85338492  1.28007738 -0.85338492]
 [-1.76776695 -1.76776695 -1.92011606  1.28007738  3.68788302  0.48768958]
 [-1.76776695 -1.76776695  1.28007738 -0.85338492  0.48768958  2.62115187]]

global right hand side load vector f:
[[ 0. ]
 [ 0. ]
 [ 0. ]
 [ 0. ]
 [ 1. ]
 [ 0.5]]

----- reduce system by removing fixed dofs -----
k_global_reduced:
[[ 3.68788302  0.48768958]
 [ 0.48768958  2.62115187]]

f reduced:
[[ 1. ]
 [ 0.5]]

----- solve system k*u = f for u -----
number of nonfixed dofs:  2 , rank of stiffness matrix:  2
(these numbers should be equal, otherwise the system is not statically determined)
solution (u reduced):
[[ 0.25213625]
 [ 0.14384355]]

----- recover full sized u by inserting 0's -----
, u recovered:
[ 0.          0.          0.          0.          0.25213625  0.14384355]

Subsystem without element 2 was solved and is now         considered as O-system. Also compute X-system without that element.

----- setup loads for X-system (force X=1 in x-element) -----
x-element is element 2, between nodes 0 and 1
initial positions of nodes:  [0 0] [5 0]
angle of element: 0.0
subsystem_x_loads = [[0, 1.0], [1, 0.0], [2, -1.0], [3, -0.0]]
now solve X-system

======= function solve truss with 2 elements =======
---------- Input parameters ------------
3 node_positions [x, y]:           [[0, 0], [5, 0], [2, 2]]
2 elements [node start, node end]: [[0, 2], [1, 2]]
4 loads [dof, value]:              [[0, 1.0], [1, 0.0], [2, -1.0], [3, -0.0]]
4 fixed_dofs:                      [0, 1, 2, 3]
parameter EA = 10

id_matrix:
[[0 2]
 [1 3]
 [4 4]
 [5 5]]
counting criterion:  4 + 2 - 2 * 3 = 0
 -> statically determined (statisch bestimmt)

----- assemble global stiffness matrix from local matrices -----
   - element  0 , angle  45.0 , length  2.82842712475
   - element  1 , angle  146.309932474 , length  3.60555127546

global stiffness matrix k_global:
[[ 1.76776695  1.76776695  0.          0.         -1.76776695 -1.76776695]
 [ 1.76776695  1.76776695  0.          0.         -1.76776695 -1.76776695]
 [ 0.          0.          1.92011606 -1.28007738 -1.92011606  1.28007738]
 [ 0.          0.         -1.28007738  0.85338492  1.28007738 -0.85338492]
 [-1.76776695 -1.76776695 -1.92011606  1.28007738  3.68788302  0.48768958]
 [-1.76776695 -1.76776695  1.28007738 -0.85338492  0.48768958  2.62115187]]

global right hand side load vector f:
[[ 1.]
 [ 0.]
 [-1.]
 [-0.]
 [ 0.]
 [ 0.]]

----- reduce system by removing fixed dofs -----
k_global_reduced:
[[ 3.68788302  0.48768958]
 [ 0.48768958  2.62115187]]

f reduced:
[[ 0.]
 [ 0.]]

----- solve system k*u = f for u -----
number of nonfixed dofs:  2 , rank of stiffness matrix:  2
(these numbers should be equal, otherwise the system is not statically determined)
solution (u reduced):
[[ 0.]
 [ 0.]]

----- recover full sized u by inserting 0's -----
, u recovered:
[ 0.  0.  0.  0.  0.  0.]


----- compute X -----
0-system (system with all external loads and element 2 removed):
   displacements:
     node 0, x: 0.0, y: 0.0
     node 1, x: 0.0, y: 0.0
   initial distance between nodes: initial_length = 5.0
   actual distance between nodes: actual_length = 5.0
   extension d0 = actual_length-initial_length = 0.0
X-system (system without external loads and with element 2 cut and member force X=1):
   displacements:
     node 0, x: 0.0, y: 0.0
     node 1, x: 0.0, y: 0.0
   initial distance between nodes: initial_length = 5.0
   actual distance between nodes: actual_length = 5.0
   additional extension of element 2: extension_x_element = 0.5
   extension d1 = actual_length-initial_length-extension_x_element = -0.5
X = -d0/d1 = 0.0

----- superpose displacements -----
u = subsystem_0_u + X * subsystem_x_u:
[ 0.          0.          0.          0.          0.25213625  0.14384355]
Created file "scenario_3a_dof4_el2_n3.png".
----- plot -----
Created file "scenario_3_dof2_el3_n3.png".
